name: Benchmark

on:
  workflow_dispatch:
    inputs:
      name:
        description: "Push name"
        default: "Bencher push"
  schedule:
    - cron: '12 4 * * *'

jobs:
  github:
    name: On GitHub
    strategy:
      matrix:
        ppa:
          - main
          - stable
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v3
    - name: Setup dependencies
      run: |
        sudo add-apt-repository ppa:cowsql/${{ matrix.ppa }} -y
        sudo apt-get update -qq
        sudo apt-get install -qq -y libraft-tools
    - uses: bencherdev/bencher@v0.3.6
    - name: Run benchmark and send results to Bencher
      env:
        BENCHER_API_TOKEN: ${{ secrets.BENCHER_API_TOKEN }}
        BENCHER_BRANCH: ${{ matrix.ppa }}
        BENCHER_TESTBED: github-ubuntu-22-04
        ENGINES: pwrite,kaio,uring
        MODES: direct,buffer
        BUFSIZES: 4096,8192,65536
      run: |
        bencher run --project raft --testbed $BENCHER_TESTBED --branch $BENCHER_BRANCH \
          "raft-benchmark disk -e $ENGINES -m $MODES -b $BUFSIZES"
        bencher run --project raft --testbed $BENCHER_TESTBED --branch $BENCHER_BRANCH \
          "raft-benchmark submit"

  bmc-deploy:
    name: On BMC - deploy
    runs-on: ubuntu-22.04
    outputs:
      id: ${{ steps.create.outputs.id }}
      address: ${{ steps.wait.outputs.address}}
    steps:
    - name: Create
      uses: phoenixnap-github-actions/create-server-bmc@v1
      id: create
      with:
        clientid: ${{secrets.BMC_CLIENT_ID}}
        clientsecret: ${{secrets.BMC_CLIENT_SECRET}}
        hostname: "bmc"
        image: "ubuntu/jammy"
        location: "ASH"
        type: "s1.c1.medium"
    - name: Wait
      id: wait
      env:
        ID: ${{ steps.create.outputs.id }}
        AUTH_URL: https://auth.phoenixnap.com/auth/realms/BMC/protocol/openid-connect/token
        API_URL: https://api.phoenixnap.com/bmc/v1/servers
        CLIENT_ID: ${{secrets.BMC_CLIENT_ID}}
        CLIENT_SECRET: ${{secrets.BMC_CLIENT_SECRET}}
      run: |
        for i in $(seq 30); do
            DATA="client_id=${CLIENT_ID}&client_secret=${CLIENT_SECRET}&grant_type=client_credentials"
            ACCESS_TOKEN=$(curl -s -X POST -d "${DATA}" ${AUTH_URL} | jq -r .access_token)
            HEADER="Authorization: Bearer ${ACCESS_TOKEN}"
            STATUS=$(curl -s -H "${HEADER}" ${API_URL}/${ID}/ | jq -r .status)
            echo status: $STATUS
            if [ "$STATUS" = "powered-on" ]; then
               break
            fi
            sleep 60
        done
        ADDR=$(curl -s -H "${HEADER}" ${API_URL}/${ID}/ | jq -r .publicIpAddresses[0])
        echo "address=$ADDR" >> $GITHUB_OUTPUT

  bmc-run:
    name: On BMC - run
    strategy:
      max-parallel: 1
      matrix:
        ppa:
          - main
          - stable
        filesystem:
          - ext4
          - btrfs
          - xfs
          - zfs
          - raw
    runs-on: ubuntu-22.04
    needs: bmc-deploy
    env:
      FILESYSTEM: ${{ matrix.filesystem }}
      PPA: ${{ matrix.ppa }}
      SSH: "ssh -o StrictHostKeyChecking=no -i ~/.ssh/bmc ubuntu@${{ needs.bmc-deploy.outputs.address}}"
    steps:
    - name: Setup SSH key
      run: |
        mkdir -p ~/.ssh/
        echo "${{secrets.BMC_SSH_KEY}}" > ~/.ssh/bmc
        chmod 600 ~/.ssh/bmc
    - name: Setup device
      id: setup
      run: |
        device=/dev/nvme1n1
        if $SSH sudo lsblk /dev/nvme1n1 -n -o MOUNTPOINTS | grep -q -e ^/$; then
            device=/dev/nvme0n1
        fi
        partition=${device}p1
        target=/mnt
        $SSH sudo parted "${device}" --script mklabel gpt
        $SSH sudo parted -a optimal "${device}" --script mkpart primary ext4 2048 15GB
        $SSH sudo partprobe
        $SSH sudo add-apt-repository -y ppa:cowsql/$PPA
        $SSH sudo apt-get update -qq
        $SSH sudo apt-get install -qq -y libraft-tools btrfs-progs xfsprogs zfsutils-linux
        case $FILESYSTEM in
          ext4)
            $SSH sudo mkfs.ext4 -F "${partition}"
            $SSH sudo mount "${partition}" "${target}"
            ;;
          btrfs)
            $SSH sudo mkfs.btrfs -f "${partition}"
            $SSH sudo mount "${partition}" "${target}"
            ;;
          xfs)
            $SSH sudo mkfs.xfs -f "${partition}"
            $SSH sudo mount "${partition}" "${target}"
            ;;
          zfs)
            $SSH sudo zpool create -f cowsql "${partition}"
            $SSH sudo zfs create -o mountpoint="${target}" cowsql/zfs
            ;;
          raw)
            target=$device
            ;;
          *)
            echo "error: unknown filesystem $filesystem"
            exit 1
            ;;
        esac
        $SSH sudo chown ubuntu $target
        echo "target=$target" >> $GITHUB_OUTPUT
    - uses: bencherdev/bencher@v0.3.6
    - name: Run benchmark
      env:
        BENCHER_API_TOKEN: ${{ secrets.BENCHER_API_TOKEN }}
        BENCHER_BRANCH: ${{ matrix.ppa }}
        BENCHER_TESTBED: bmc-s1-c1-medium-${{ matrix.filesystem }}
        ENGINES: pwrite,kaio,uring
        MODES: direct,buffer
        BUFSIZES: 4096,8192,65536,262144
        TARGET: ${{ steps.setup.outputs.target}}
      run: |
        bencher run --project raft --testbed $BENCHER_TESTBED --branch $BENCHER_BRANCH \
          "$SSH raft-benchmark disk -d $TARGET -e $ENGINES -m $MODES -b $BUFSIZES"
        if [ "$FILESYSTEM" != "raw" ]; then
          bencher run --project raft --testbed $BENCHER_TESTBED --branch $BENCHER_BRANCH \
            "$SSH raft-benchmark submit -d $TARGET"
        fi
    - name: Cleanup
      run: |
        if [ $FILESYSTEM != raw ]; then
          $SSH sudo umount ${{ steps.setup.outputs.target}}
          if [ "$FILESYSTEM" = "zfs" ]; then
            $SSH sudo zpool destroy -f cowsql
          fi
        fi
        $SSH sudo apt-get purge -y libraft-tools libraft2
        $SSH sudo add-apt-repository -r -y ppa:cowsql/$PPA

  bmc-delete:
    name: On BMC - delete
    runs-on: ubuntu-22.04
    if: ${{ always() }}
    needs: [bmc-deploy, bmc-run]
    steps:
    - name: Delete
      uses: phoenixnap-github-actions/delete-server-bmc@v1
      with:
        clientid: ${{secrets.BMC_CLIENT_ID}}
        clientsecret: ${{secrets.BMC_CLIENT_SECRET}}
        serverid: ${{ needs.bmc-deploy.outputs.id}}
